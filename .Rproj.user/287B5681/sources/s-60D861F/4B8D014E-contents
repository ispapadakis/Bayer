# Using mtcars

library(ggplot2)

# create factors with value labels 
mtcars$gear <- factor(mtcars$gear,levels=c(3,4,5),
                      labels=c("3gears","4gears","5gears")) 
mtcars$am <- factor(mtcars$am,levels=c(0,1),
                    labels=c("Automatic","Manual")) 
mtcars$cyl <- factor(mtcars$cyl,levels=c(4,6,8),
                     labels=c("4cyl","6cyl","8cyl")) 

# Kernel density plots for mpg
# grouped by number of gears (indicated by color)
qplot(mpg, data=mtcars, geom="density", fill=gear, alpha=I(.5), 
      main="Distribution of Gas Milage", xlab="Miles Per Gallon", 
      ylab="Density")

# Scatterplot of mpg vs. hp for each combination of gears and cylinders
# in each facet, transmittion type is represented by shape and color
qplot(hp, mpg, data=mtcars, shape=am, color=am, 
      facets=gear~cyl, size=I(3),
      xlab="Horsepower", ylab="Miles per Gallon") 

# Separate regressions of mpg on weight for each number of cylinders
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"), 
      method="lm", formula=y~x, color=cyl, 
      main="Regression of MPG on Weight", 
      xlab="Weight", ylab="Miles per Gallon")

# Boxplots of mpg by number of gears 
# observations (points) are overlayed and jittered
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"), 
      fill=gear, main="Mileage by Gear Number",
      xlab="", ylab="Miles per Gallon")

#Using Milk

library(tidyverse)
library(Hmisc)
library(lme4)
library(nlme)

head(Milk)

# My Example
df = data.frame(sort(table(Milk$Cow)))
names(df)[1] = 'Cow'
head(df)

ggplot(df,aes(x=Cow,y=Freq)) + geom_point() # Basic
ggplot(df,aes(x=Cow,y=Freq)) + geom_point() + theme(axis.text.x = element_text(angle = 90, hjust = 0)) # Rotate x-axis labels
ggplot(df,aes(x=Cow,y=Freq,col=Cow)) + geom_point() # With Colors
ggplot(df,aes(x=Cow,y=Freq,col=Cow)) + geom_point() + guides(col=FALSE) # Drop Legend
ggplot(df,aes(x=Cow,y=Freq,col=Cow)) + geom_point() + guides(col=FALSE) + 
  theme(axis.text.x=element_blank(),axis.ticks.x=element_blank()) # Drop X Axis


# Tutorial Examples
ggplot(data = Milk, aes(x=Time, y=protein,col=Cow)) + 
  geom_point() + guides(col=F)

ggplot(data = Milk, aes(x=Time, y=protein)) + 
  geom_point() + 
  geom_line(aes(group=Cow))

ggplot(data = Milk, aes(x=Time, y=protein)) + 
  geom_point() + 
  geom_line(aes(group=Cow)) + 
  geom_smooth()


#store specification in object p and then produce graph
p = ggplot(data = Milk, aes(x=Time, y=protein)) + 
  geom_point()
p

# now
p + geom_smooth()

### Univariate Plots
pro <- ggplot(Milk, aes(x=protein))

#histogram
pro + geom_histogram()
#density
pro + geom_density()
# stat_bin()
pro + stat_bin()
pro + stat_bin(geom="line")

### Freq Plots
ggplot(Milk, aes(x=Diet)) + geom_bar()



### Geoms That Require X & Y
p2 <- ggplot(Milk, aes(x=Time, y=protein))
#scatter plot
p2 + geom_point()
p2 + geom_smooth()
# Change Axes / Focus Region
p2 + geom_point() + 
  lims(x=c(5,10), y=c(3,4)) +
  labs(x="Weeks", y="Protein Content")
#stat_summary
p2 + stat_summary()
# Use Custom Aggregation Function
meanlog <- function(y) {mean(log(y))}
p2 + stat_summary(fun.y="meanlog", geom="line")

# Plot Char Type by Class
ggplot(Milk, aes(x=Time, y=protein, shape=Diet)) +
  geom_point() +
  scale_shape_manual(values=c(5, 3, 8))

# OR
ggplot(Milk, aes(x=Time, y=protein, shape=Diet)) +
  geom_point() +
  scale_shape_manual(values=c("B","M","L"))


dDiet <- ggplot(Milk, aes(x=protein, fill=Diet)) + 
  geom_density(alpha=1/3) # makes all colors transparent
dDiet + scale_fill_hue()

##############################
##### Faceting (paneling)
##############################
p3 = ggplot(Milk, aes(x=protein, color=Diet))
p3 + 
  geom_density() + 
  facet_wrap(~Time)

ggplot(Milk, aes(x=Time, y=protein, color=Diet)) + geom_point() + 
  facet_grid(Diet~.)

##### THEMES #####
pt <- ggplot(Milk, aes(x=Time, y=protein)) + 
  geom_point()
pt + theme(panel.background=element_rect(fill="lightblue"))

pt + theme(axis.title.x=element_text(size=20, color="red"))

pt + theme(panel.background=element_blank(),
           axis.title.x=element_blank())

########
######## Additional Example
########

tp <- ggplot(ToothGrowth, aes(x=dose, y=len))
tp + geom_point()

tp.1 <- tp + stat_summary()
tp.1

# ... now
tp.2 <- tp.1 + stat_summary(fun.y="mean", geom="line")
tp.2

#all plots in tp.2 will now be colored by supp
tp.2 + aes(color=supp)


#####
#####  Statistical Analysis
#####

model_lin <- lm(len ~ dose*supp, data=ToothGrowth)
summary(model_lin)
ToothGrowth$fit <- predict(model_lin)
ToothGrowth$res <- residuals(model_lin)

ggplot(ToothGrowth, aes(x=fit, y=res, color=supp)) + 
  geom_point() +
  geom_smooth() 




#create dose-squared variable
ToothGrowth$dosesq <- ToothGrowth$dose^2
# model with linear and quadratic effects interacted with supp
model_quad <- lm(len ~ (dose + dosesq)*supp, data=ToothGrowth)
# main effects model
AIC(model_lin, model_quad)
##            df      AIC
## model_lin   5 344.9571
## model_quad  7 332.7056
# interaction is significant, so we output model coefficients
summary(model_quad)

# get fitted values and residuals, quad model
ToothGrowth$fit_q <- predict(model_quad)
ToothGrowth$res_q <- residuals(model_quad)

# residuals vs fitted again
ggplot(ToothGrowth, aes(x=fit_q, y=res_q, color=supp)) + 
  geom_point() +
  geom_smooth()


# Residuals
ToothGrowth$res_stand <- rstandard(model_quad)
#q-q plot of residuals and diagonal reference line
#geom_abline default aesthetics are yintercept=0 and slope=1
ggplot(ToothGrowth, aes(sample=res_stand)) + 
  stat_qq() + 
  geom_abline()


# Yet Another EDA Example

summary(esoph)

#"stat=identity" plots the value of the variable mapped to "y" (ncases) as is
ggplot(esoph, aes(x=alcgp, y=ncases)) + 
  geom_bar(stat="identity")

# versus
ggplot(esoph, aes(x=alcgp)) + 
  geom_bar()

#gather ncontrols and ncases into a single column, "n"
#labels will be in column "status"
esoph_long <- gather(esoph, key="status", value="n", c(ncases, ncontrols))
#sort data before viewing (arrange from package dplyr)
esoph_long <- arrange(esoph_long, agegp, alcgp, tobgp)
#we can see the stacking of ncases and ncontrols
head(esoph_long)
##   agegp     alcgp    tobgp    status  n
## 1 25-34 0-39g/day 0-9g/day    ncases  0
## 2 25-34 0-39g/day 0-9g/day ncontrols 40
## 3 25-34 0-39g/day    10-19    ncases  0
## 4 25-34 0-39g/day    10-19 ncontrols 10
## 5 25-34 0-39g/day    20-29    ncases  0
## 6 25-34 0-39g/day    20-29 ncontrols  6

#put n for cases and controls on the same bar graph
ggplot(esoph_long, aes(x=alcgp, y=n, fill=status)) + 
  geom_bar(stat="identity")

# More Stuff with geom_bar
an <- ggplot(esoph_long, aes(x=alcgp, y=n, fill=status)) + 
  geom_bar(stat="identity", position="fill")
an

#age group instead of alcohol consumption
an + aes(x=agegp)

#tobgp to split rows, no splitting along columns
an + facet_grid(tobgp~.)

#3-way interaction visualization
an + facet_grid(tobgp~agegp, labeller="label_both")


#stacked counts 
ggplot(esoph_long, aes(x=alcgp, y=n, fill=status)) + 
  geom_bar(stat="identity", position="stack") +
  facet_grid(tobgp~agegp, labeller="label_both")



######
###### LOGISTIC REGRESSION MODEL
######

#change to numeric to model just linear effects of each
logit2 <- glm(cbind(ncases, ncontrols) ~ as.numeric(agegp) + 
                as.numeric(alcgp) + as.numeric(tobgp),
              data=esoph, family=binomial)
summary(logit2)

#get predicted probabilities and Cook's D
esoph$fit <- predict(logit2, type="response")
esoph$cooksd <- cooks.distance(logit2)

#fitted vs Cooks D, colored by age, sized by alcohol, shaped by tobacco
ggplot(esoph, aes(x=fit, y=cooksd, 
                  color=agegp, size=alcgp, shape=tobgp)) + 
  geom_point() 


#starting graph
p2.0 <- ggplot(esoph, aes(x=tobgp, y=fit, 
                          alpha=alcgp, group=alcgp)) +
  geom_point(size=3) + 
  facet_grid(~agegp)
p2.0

#in theme
# remove things with element_blank()
# gray0 is black and gray100 is white
p2.1 <- p2.0 +
  theme(panel.background=element_blank(),
        strip.background=element_blank(),
        axis.ticks=element_blank(),
        panel.grid.major.y=element_line(color="gray90"))
p2.1